stream
    |from()
        .measurement('login_attempts')
    |window()
        .period(1m)
        .every(1m)
    |groupBy('ip_address')
    |alert()
        .crit(lambda: sum("count") > 10)
        .stateChangesOnly()
        .message('Brute force attack detected on IP {{ index .Tags "ip_address" }}')
        .slack()

stream
    |from()
        .measurement('port_scans')
    |window()
        .period(1m)
        .every(1m)
    |groupBy('ip_address')
    |alert()
        .crit(lambda: sum("count") > 100)
        .stateChangesOnly()
        .message('Port scanning detected on IP {{ index .Tags "ip_address" }}')
        .email()

stream
    |from()
        .measurement('network_traffic')
    |window()
        .period(1m)
        .every(1m)
    |groupBy('destination_ip')
    |alert()
        .crit(lambda: sum("bytes_sent") > 1000000)
        .stateChangesOnly()
        .message('Possible data exfiltration attempt detected from IP {{ index .Tags "destination_ip" }}')
        .pagerDuty()

stream
    |from()
        .measurement('network_traffic')
    |window()
        .period(1m)
        .every(1m)
    |groupBy('source_ip')
    |alert()
        .crit(lambda: sum("bytes_received") > 1000000)
        .stateChangesOnly()
        .message('Possible targeted attack detected on IP {{ index .Tags "source_ip" }}')
        .slack()

stream
    |from()
        .measurement('dns_requests')
    |window()
        .period(1m)
        .every(1m)
    |groupBy('requested_domain')
    |alert()
        .crit(lambda: count("response_domain") != count("requested_domain"))
        .stateChangesOnly()
        .message('Possible DNS spoofing detected for domain {{ index .Tags "requested_domain" }}')
        .email()

stream
    |from()
        .measurement('network_traffic')
    |window()
        .period(1m)
        .every(1m)
    |groupBy('destination_ip')
    |alert()
        .crit(lambda: count("bytes_sent") > 100000 and countDistinct("source_ip") < 5)
        .stateChangesOnly()
        .message('Possible malware infection detected on IP {{ index .Tags "destination_ip" }}')
        .slack()

stream
    |from()
        .measurement('network_traffic')
    |window()
        .period(1m)
        .every(1m)
    |groupBy('destination_ip')
    |alert()
        .crit(lambda: sum("bytes_sent") > 1000000)
        .stateChangesOnly()
        .message('Possible data exfiltration attempt detected from IP {{ index .Tags "destination_ip" }}')
        .email()

stream
    |from()
        .measurement('user_activity')
    |window()
        .period(1h)
        .every(1h)
    |groupBy('user')
    |alert()
        .crit(lambda: count("activity") > 100 and countDistinct("source_ip") < 5)
        .stateChangesOnly()
        .message('Possible insider threat detected for user {{ index .Tags "user" }}')
        .pagerDuty()

stream
    |from()
        .measurement('network_traffic')
    |window()
        .period(1m)
        .every(1m)
    |alert()
        .crit(lambda: sum("bytes_sent") > 1000000)
        .stateChangesOnly()
        .message('Suspicious network traffic detected')
        .email()

stream
    |from()
        .measurement('system_metrics')
    |window()
        .period(1m)
        .every(1m)
    |alert()
        .warn(lambda: mean("cpu_usage") > 90)
        .crit(lambda: mean("cpu_usage") > 95)
        .stateChangesOnly()
        .message('High CPU usage detected')
        .slack()

var measurement = 'network'
var protocol = 'telnet'

stream
    |from()
        .measurement(measurement)
    |filter(lambda: "protocol" == protocol)
    |alert()
        .id('{{.Name}}/{{.Group}}/{{.Task}}/unusual_protocol_usage')
        .message('{{.ID}} - {{.Level}}: Unusual protocol usage detected. Device {{.Tags.device}} is using protocol {{.Tags.protocol}}')
        .warn()
        .stateChangesOnly()
        .log('/var/log/kapacitor/alerts.log')
        .exec('/usr/local/bin/send_alert.sh')

var measurement = 'network'
var field = 'packet_size'
var threshold = 1500

stream
    |from()
        .measurement(measurement)
    |filter(lambda: "packet_size" > threshold)
    |alert()
        .id('{{.Name}}/{{.Group}}/{{.Task}}/large_packets')
        .message('{{.ID}} - {{.Level}}: Large packets detected. Device {{.Tags.device}} is sending/receiving packets larger than {{threshold}} bytes')
        .warn()
        .stateChangesOnly()
        .log('/var/log/kapacitor/alerts.log')
        .exec('/usr/local/bin/send_alert.sh')

var measurement = 'network'
var protocol = 'icmp'
var threshold = 10000

stream
    |from()
        .measurement(measurement)
    |filter(lambda: "protocol" == protocol)
    |count('icmp_count')
        .as('icmp_count')
    |alert()
        .id('{{.Name}}/{{.Group}}/{{.Task}}/icmp_traffic')
        .message('{{.ID}} - {{.Level}}: Unusually high ICMP traffic detected. Device {{.Tags.device}} is sending/receiving {{.Fields.icmp_count}} ICMP packets')
        .crit(lambda: "icmp_count" > threshold)
        .stateChangesOnly()
        .log('/var/log/kapacitor/alerts.log')
        .exec('/usr/local/bin/send_alert.sh')

var measurement = 'dns'
var field = 'query'

stream
    |from()
        .measurement(measurement)
    |filter(lambda: "query" matches /.*\..*\./)
    |alert()
        .id('{{.Name}}/{{.Group}}/{{.Task}}/dns_tunneling')
        .message('{{.ID}} - {{.Level}}: DNS tunneling detected. Device {{.Tags.device}} is sending DNS queries that appear to contain data')
        .warn()
        .stateChangesOnly()
        .log('/var/log/kapacitor/alerts.log')
        .exec('/usr/local/bin/send_alert.sh')

var measurement = 'authentication'
var threshold = 5

stream
    |from()
        .measurement(measurement)
    |group()
        .by('username', 'device')
    |count('login_count')
        .as('login_count')
    |alert()
        .id('{{.Name}}/{{.Group}}/{{.Task}}/unusual_login_activity')
        .message('{{.ID}} - {{.Level}}: Unusual login activity detected. Device {{.Tags.device}} has {{.Fields.login_count}} failed login attempts for user {{.Tags.username}}')
        .crit(lambda: "login_count" > threshold)
        .stateChangesOnly()
